import { useState, useEffect, createElement as h } from 'react';import { fetchSharePointList, getCurrentUser, trimLoginNaamPrefix } from '../services/sharepointService.js';const UserRegistrationCheck = ({ onUserValidated }) => {    const [isChecking, setIsChecking] = useState(true);    const [isRegistered, setIsRegistered] = useState(false);    const [currentUser, setCurrentUser] = useState(null);    useEffect(() => {        checkUserRegistration();    }, []);    const checkUserRegistration = async () => {        try {            setIsChecking(true);            // Get current user from SharePoint            const user = await getCurrentUser();            console.log('Current user from SharePoint:', user);            if (!user) {                throw new Error('Kan huidige gebruiker niet ophalen');            }            setCurrentUser(user);            // Format the username for comparison (domain\\username format)            let userLoginName = user.LoginName;            // Remove claim prefix if present (i:0#.w|domain\\username -> domain\\username)            if (userLoginName.startsWith('i:0#.w|')) {                userLoginName = userLoginName.substring(7);            }            console.log('Formatted login name for comparison:', userLoginName);            // Fetch Medewerkers list to check if user exists            const medewerkers = await fetchSharePointList('Medewerkers');            console.log('Total medewerkers found:', medewerkers.length);            console.log('Sample medewerkers data:', medewerkers.slice(0, 3).map(m => ({                ID: m.ID,                Username: m.Username,                Naam: m.Naam,                Actief: m.Actief            })));            // Check if user exists in Medewerkers list            const userExists = medewerkers.some(medewerker => {                const medewerkersUsername = medewerker.Username;                // Skip inactive users                if (medewerker.Actief === false) {                    return false;                }                console.log(`Comparing: "${userLoginName}" with "${medewerkersUsername}"`);                // Direct comparison                if (medewerkersUsername === userLoginName) {                    console.log('✓ Direct match found!');                    return true;                }                // Try with just the username part (after domain\\)                const trimmedLoginName = trimLoginNaamPrefix(userLoginName);                const trimmedMedewerkersName = trimLoginNaamPrefix(medewerkersUsername);                if (trimmedMedewerkersName === trimmedLoginName) {                    console.log('✓ Trimmed username match found!');                    return true;                }                // Try case insensitive comparison                if (medewerkersUsername && medewerkersUsername.toLowerCase() === userLoginName.toLowerCase()) {                    console.log('✓ Case insensitive match found!');                    return true;                }                return false;            });            console.log('User exists in Medewerkers list:', userExists);            setIsRegistered(userExists);            if (userExists) {                // User is registered, continue to main app                onUserValidated(true);            }        } catch (error) {            console.error('Error checking user registration:', error);            setIsRegistered(false);        } finally {            setIsChecking(false);        }    };    const redirectToRegistration = () => {        window.location.href = 'pages/registratie.aspx';    };    if (isChecking) {        return h('div', {            className: 'flex items-center justify-center min-h-screen bg-gray-50',            style: { fontFamily: 'Inter, sans-serif' }        },            h('div', { className: 'text-center' },                h('div', { className: 'loading-spinner', style: { margin: '0 auto 16px' } }),                h('h2', { className: 'text-xl font-medium text-gray-900' }, 'Gebruiker valideren...'),                h('p', { className: 'text-gray-600 mt-2' }, 'Even geduld, we controleren uw toegangsrechten.')            )        );    }    if (!isRegistered) {        return h('div', {            className: 'flex items-center justify-center min-h-screen bg-gray-50',            style: { fontFamily: 'Inter, sans-serif' }        },            h('div', { className: 'max-w-md mx-auto bg-white rounded-lg shadow-lg p-8 text-center' },                h('div', { className: 'mb-6' },                    h('div', {                        className: 'mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-yellow-100 mb-4'                    },                        h('i', { className: 'fas fa-exclamation-triangle text-yellow-600' })                    ),                    h('h2', { className: 'text-xl font-semibold text-gray-900 mb-2' }, 'Registratie Vereist'),                    h('p', { className: 'text-gray-600' },                        `Uw account (${currentUser?.Title || 'onbekend'}) is nog niet geregistreerd in het verlofrooster systeem.`                    )                ),                h('div', { className: 'space-y-4' },                    h('p', { className: 'text-sm text-gray-500' },                        'Om toegang te krijgen tot het verlofrooster, moet u eerst uw profiel instellen en registreren in het systeem.'                    ),                    h('button', {                        className: 'w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg transition duration-200',                        onClick: redirectToRegistration                    },                        h('i', { className: 'fas fa-user-plus mr-2' }),                        'Ga naar Registratie'                    ),                    h('button', {                        className: 'w-full bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-2 px-4 rounded-lg transition duration-200 mt-2',                        onClick: checkUserRegistration                    },                        h('i', { className: 'fas fa-sync-alt mr-2' }),                        'Opnieuw Controleren'                    ),                    h('div', { className: 'mt-4 pt-4 border-t border-gray-200' },                        h('p', { className: 'text-xs text-gray-400 mb-2' },                            'Heeft u al toegang tot het oude systeem?'                        ),                        h('a', {                            href: '../index.html',                            className: 'text-xs text-blue-600 hover:text-blue-800 transition duration-200'                        },                            'Ga naar het oude verlofrooster systeem'                        )                    )                ),                currentUser && h('div', { className: 'mt-6 pt-6 border-t border-gray-200' },                    h('p', { className: 'text-xs text-gray-400' },                        `Gebruiker: ${currentUser.LoginName}`                    )                )            )        );    }    return null; // User is registered, don't render anything};export default UserRegistrationCheck;