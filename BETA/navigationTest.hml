<!DOCTYPE html>
<html lang="nl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Navigation Test - Verlofrooster</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="css/verlofrooster_stijl.css" rel="stylesheet">
    <style>
        body {
            background: #f4f7fa;
            padding: 2rem;
            font-family: 'Inter', sans-serif;
        }
        
        .test-container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 8px;
            padding: 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .test-section {
            margin-bottom: 2rem;
            padding: 1.5rem;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            background: #f8f9fa;
        }
        
        .permission-info {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
            font-family: monospace;
            font-size: 0.9rem;
        }
        
        .navigation-demo {
            background: #2c3e50;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }
        
        .demo-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: white;
        }
        
        .demo-left {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 0.5rem;
        }
        
        .status-loading { background: #ffc107; }
        .status-success { background: #28a745; }
        .status-error { background: #dc3545; }
    </style>
    
    <!-- React en configuratie bestanden -->
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="js/config/configLijst.js"></script>
</head>

<body>
    <div class="test-container">
        <h1>🔐 Navigation Permission System Test</h1>
        <p>Deze pagina test het nieuwe permission-based navigation systeem voor de verlofrooster applicatie.</p>
        
        <div class="test-section">
            <h3>📊 Permission Status</h3>
            <div id="permission-status" class="permission-info">Laden...</div>
        </div>
        
        <div class="test-section">
            <h3>🧪 Navigation Demo</h3>
            <p>Dit is een voorbeeldweergave van hoe de navigatie eruit ziet in de hoofdapplicatie:</p>
            
            <div class="navigation-demo">
                <div class="demo-header">
                    <div class="demo-left">
                        <button class="btn btn-melding">
                            <i class="fas fa-exclamation-triangle"></i>
                            Melding
                        </button>
                        <h2 style="margin: 0; font-size: 1.3rem;">Team Rooster Manager</h2>
                    </div>
                    <div id="demo-navigation"></div>
                </div>
            </div>
        </div>
        
        <div class="test-section">
            <h3>🎯 Permission Tests</h3>
            <div id="permission-tests">Laden...</div>
        </div>
        
        <div class="test-section">
            <h3>📝 Instructions</h3>
            <ol>
                <li><strong>Geef uzelf de juiste groepsrechten</strong> in SharePoint om de knoppen te zien</li>
                <li><strong>Admin groepen:</strong> "1. Sharepoint beheer", "1.1. Mulder MT"</li>
                <li><strong>Functional groepen:</strong> "1. Sharepoint beheer", "1.1. Mulder MT", "2.6 Roosteraars"</li>
                <li><strong>Taakbeheer groepen:</strong> "1. Sharepoint beheer", "1.1. Mulder MT", "2.6 Roosteraars", "2.3. Senioren beoordelen", "2.4. Senioren administratie"</li>
                <li><strong>Configureer de gemachtigdenLijst</strong> in SharePoint met de juiste gedeeltes en groepen</li>
                <li><strong>Test de navigatie</strong> door naar <a href="k.aspx">k.aspx</a> te gaan</li>
            </ol>
        </div>
    </div>

    <script type="module">
        import { getCurrentUserGroups, isUserInAnyGroup, hasAccessToSection } from './js/services/permissionService.js';
        
        const { createElement: h, useState, useEffect } = React;
        
        // Test Navigation Component
        const TestNavigation = () => {
            const [permissions, setPermissions] = useState({
                isAdmin: false,
                isFunctional: false,
                isTaakbeheer: false,
                loading: true,
                error: null
            });
            
            useEffect(() => {
                const checkPermissions = async () => {
                    try {
                        const adminGroups = ["1. Sharepoint beheer", "1.1. Mulder MT"];
                        const functionalGroups = ["1. Sharepoint beheer", "1.1. Mulder MT", "2.6 Roosteraars"];
                        const taakbeheerGroups = ["1. Sharepoint beheer", "1.1. Mulder MT", "2.6 Roosteraars", "2.3. Senioren beoordelen", "2.4. Senioren administratie"];

                        const [isAdmin, isFunctional, isTaakbeheer] = await Promise.all([
                            isUserInAnyGroup(adminGroups),
                            isUserInAnyGroup(functionalGroups),
                            isUserInAnyGroup(taakbeheerGroups)
                        ]);

                        setPermissions({
                            isAdmin,
                            isFunctional,
                            isTaakbeheer,
                            loading: false,
                            error: null
                        });
                    } catch (error) {
                        console.error('Permission check failed:', error);
                        setPermissions(prev => ({ ...prev, loading: false, error: error.message }));
                    }
                };
                
                checkPermissions();
            }, []);
            
            if (permissions.loading) {
                return h('div', { style: { color: '#6c757d' } }, 
                    h('span', { className: 'status-indicator status-loading' }),
                    'Permissies laden...'
                );
            }
            
            if (permissions.error) {
                return h('div', { style: { color: '#dc3545' } }, 
                    h('span', { className: 'status-indicator status-error' }),
                    `Fout: ${permissions.error}`
                );
            }
            
            return h('div', { style: { display: 'flex', gap: '0.75rem', alignItems: 'center' } },
                // Admin button
                permissions.isAdmin && h('button', {
                    className: 'btn btn-admin',
                    onClick: () => alert('Zou navigeren naar Admin Centrum'),
                    title: 'Administratie Centrum'
                },
                    h('i', { className: 'fas fa-cog' }),
                    'Admin'
                ),
                
                // Beheer button
                permissions.isFunctional && h('button', {
                    className: 'btn btn-functional',
                    onClick: () => alert('Zou navigeren naar Beheer Centrum'),
                    title: 'Beheer Centrum'
                },
                    h('i', { className: 'fas fa-tools' }),
                    'Beheer'
                ),
                
                // Behandelen button
                permissions.isTaakbeheer && h('button', {
                    className: 'btn btn-taakbeheer',
                    onClick: () => alert('Zou navigeren naar Behandel Centrum'),
                    title: 'Behandel Centrum'
                },
                    h('i', { className: 'fas fa-tasks' }),
                    'Behandelen'
                ),
                
                // Tour button (always visible)
                h('button', {
                    className: 'btn btn-tour',
                    onClick: () => alert('Zou navigeren naar Tour'),
                    title: 'Tour - Overzicht van alle functies'
                },
                    h('i', { className: 'fas fa-question-circle' }),
                    'Tour'
                )
            );
        };
        
        // Permission Status Component
        const PermissionStatus = () => {
            const [status, setStatus] = useState('Laden...');
            
            useEffect(() => {
                const loadStatus = async () => {
                    try {
                        const userGroups = await getCurrentUserGroups();
                        const statusText = `
Gebruikersgroepen: ${userGroups.length > 0 ? userGroups.join(', ') : 'Geen groepen gevonden'}

Admin toegang: ${await isUserInAnyGroup(["1. Sharepoint beheer", "1.1. Mulder MT"])}
Functional toegang: ${await isUserInAnyGroup(["1. Sharepoint beheer", "1.1. Mulder MT", "2.6 Roosteraars"])}  
Taakbeheer toegang: ${await isUserInAnyGroup(["1. Sharepoint beheer", "1.1. Mulder MT", "2.6 Roosteraars", "2.3. Senioren beoordelen", "2.4. Senioren administratie"])}

Status: ✅ Permissie systeem werkt correct
                        `;
                        setStatus(statusText);
                    } catch (error) {
                        setStatus(`❌ Fout bij laden permissies: ${error.message}`);
                    }
                };
                
                loadStatus();
            }, []);
            
            return status;
        };
        
        // Permission Tests Component
        const PermissionTests = () => {
            const [tests, setTests] = useState([]);
            const [loading, setLoading] = useState(true);
            
            useEffect(() => {
                const runTests = async () => {
                    const testResults = [];
                    
                    try {
                        // Test 1: User groups
                        const userGroups = await getCurrentUserGroups();
                        testResults.push({
                            name: 'Gebruikersgroepen ophalen',
                            result: userGroups.length > 0 ? '✅ Geslaagd' : '⚠️  Geen groepen gevonden',
                            details: `${userGroups.length} groep(en): ${userGroups.join(', ') || 'Geen'}`
                        });
                        
                        // Test 2: Admin check
                        const isAdmin = await isUserInAnyGroup(["1. Sharepoint beheer", "1.1. Mulder MT"]);
                        testResults.push({
                            name: 'Admin rechten check',
                            result: isAdmin ? '✅ Toegang' : '❌ Geen toegang',
                            details: `Admin groepen: "1. Sharepoint beheer", "1.1. Mulder MT"`
                        });
                        
                        // Test 3: Functional check
                        const isFunctional = await isUserInAnyGroup(["1. Sharepoint beheer", "1.1. Mulder MT", "2.6 Roosteraars"]);
                        testResults.push({
                            name: 'Functional rechten check',
                            result: isFunctional ? '✅ Toegang' : '❌ Geen toegang',
                            details: `Functional groepen: "1. Sharepoint beheer", "1.1. Mulder MT", "2.6 Roosteraars"`
                        });
                        
                        // Test 4: Taakbeheer check
                        const isTaakbeheer = await isUserInAnyGroup(["1. Sharepoint beheer", "1.1. Mulder MT", "2.6 Roosteraars", "2.3. Senioren beoordelen", "2.4. Senioren administratie"]);
                        testResults.push({
                            name: 'Taakbeheer rechten check',
                            result: isTaakbeheer ? '✅ Toegang' : '❌ Geen toegang',
                            details: `Taakbeheer groepen: "1. Sharepoint beheer", "1.1. Mulder MT", "2.6 Roosteraars", "2.3. Senioren beoordelen", "2.4. Senioren administratie"`
                        });
                        
                    } catch (error) {
                        testResults.push({
                            name: 'Permission System Test',
                            result: '❌ Fout',
                            details: `Fout: ${error.message}`
                        });
                    }
                    
                    setTests(testResults);
                    setLoading(false);
                };
                
                runTests();
            }, []);
            
            if (loading) {
                return h('div', null, 'Tests uitvoeren...');
            }
            
            return h('div', null,
                tests.map((test, index) => 
                    h('div', { 
                        key: index,
                        style: { 
                            padding: '0.75rem',
                            margin: '0.5rem 0',
                            border: '1px solid #dee2e6',
                            borderRadius: '4px',
                            backgroundColor: 'white'
                        }
                    },
                        h('div', { style: { fontWeight: 'bold', marginBottom: '0.25rem' } },
                            `${test.name}: ${test.result}`
                        ),
                        h('div', { style: { fontSize: '0.9rem', color: '#6c757d' } },
                            test.details
                        )
                    )
                )
            );
        };
        
        // Render components
        ReactDOM.render(h(TestNavigation), document.getElementById('demo-navigation'));
        ReactDOM.render(h(PermissionStatus), document.getElementById('permission-status'));
        ReactDOM.render(h(PermissionTests), document.getElementById('permission-tests'));
        
    </script>
</body>
</html>
